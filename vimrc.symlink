" ------------------------------
" Leader key
" ------------------------------
let mapleader = ","
let g:mapleader = ","

" ------------------------------
" css/sass experimental mappings
" ------------------------------
nmap <leader>V :%s/show/false/g<cr>:w<cr>:nohl<cr>
nmap <leader>C :%s/false/show/g<cr>:w<cr>:nohl<cr>
nmap <leader>cc /{<cr>v%J0:nohl<cr>
nmap <leader>co :s/{ /{\r/g<cr>:s/}/\r}/g<cr>k>>:s/; /;\r\t/g<cr>dd%0:nohl<cr>
nmap <leader>cñ jvi{:sort /\S/ r<cr>k0:echo "Sorted CSS"<cr>
nmap <leader>ck vi{<esc>j%0
nmap <leader>ññ :source /Users/hisco/Desktop/folding.vim<cr>:call Folding()<cr>

" ------------------------------
" Mapeos
" ------------------------------
map <Leader>y :NERDTreeToggle<CR>
nmap <leader>w :w!<cr>
map <leader>e :e ~/.vimrc<cr>
inoremap jj <Esc>
map <space> /
map <c-space> ?
" Facilita ir a marcas
noremap <bs> `
" Mueve el cursor de línea en línea aunque sea un párrafo 'wrapeado'
map j gj
map k gk

" Remove hightlight
noremap <Leader>, :nohl<CR>
vnoremap <Leader>, :nohl<CR>
inoremap <Leader>, :nohl<CR>

" Switch CWD to the directory of the open buffer
map <leader>cd :cd<space>%:h<cr>:pwd<cr>

" Smart way to move between windows
map <C-j> <c-w>j
map <C-k> <c-w>k
map <C-h> <c-w>h
map <C-l> <c-w>l

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" No Arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" ------------------------------
" PLUG.vim setup
" ------------------------------
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'https://github.com/scrooloose/nerdcommenter'
Plug 'https://github.com/bling/vim-airline'
Plug 'https://github.com/jiangmiao/auto-pairs'
Plug 'https://github.com/MarcWeber/vim-addon-mw-utils'
Plug 'https://github.com/honza/vim-snippets'
Plug 'https://github.com/garbas/vim-snipmate'
Plug 'https://github.com/scrooloose/nerdtree'
Plug 'https://github.com/tomtom/tlib_vim'
Plug 'https://github.com/kien/ctrlp.vim'
Plug 'https://github.com/flazz/vim-colorschemes'
Plug 'https://github.com/terryma/vim-multiple-cursors'
call plug#end()

" ------------------------------
" Color & Font
" ------------------------------
syntax on
set guifont=Monaco:h14 " Font
set background=dark
"colorsheme gruvbox
"colorscheme flatcolor
"colorscheme slate
"colorscheme solarized
"colorscheme wombat256mod
"colorscheme desert
colorscheme desertEx

" ------------------------------
" General
" ------------------------------
set encoding=utf8 " utf8
set ffs=unix,dos,mac " Filesystem
set nrformats-=octal

"Atajos (tipo emacs) para la línea de comandos de vim
:cnoremap <C-a>  <Home>
:cnoremap <C-b>  <Left>
:cnoremap <C-f>  <Right>
:cnoremap <C-d>  <Delete>
:cnoremap <M-b>  <S-Left>
:cnoremap <M-f>  <S-Right>
:cnoremap <M-d>  <S-right><Delete>
:cnoremap <Esc>b <S-Left>
:cnoremap <Esc>f <S-Right>
:cnoremap <Esc>d <S-right><Delete>
:cnoremap <C-g>  <C-c>

set guioptions=egmrt " Hide Toolbar in MacVim

" Line numbers
set number
set laststatus=2 " Always shows status bar

" Better copy & paste
set pastetoggle=<F2>
set clipboard=unnamed

" Mouse and backspace
set mouse=a
set bs=2

" ------------------------------
" CtrlP
" ------------------------------
let g:ctrlp_show_hidden = 1
let g:ctrlp_working_path_mode = 'a'

" ------------------------------
" General
" ------------------------------
set history=700 " history
set autoread " set auto read when a file is changed from the outside

" Reload .vimrc
autocmd! bufwritepost .vimrc source %

" Hitting F5 will clean out all trailing whitespace or tabs
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>:retab<CR>

" vim ui

" set 7 lines to the cursor - when moving vertocally using j/k
set so=7

" Search related
set ignorecase
set smartcase
set hlsearch
set incsearch

" ignore compiled files
set wildignore+=*.o,*~,*.pyc,*.a
set wildignore+=*.bpm,*.gif,*.ico,*.jpg,*.png
set wildignore+=.DS_Store,.git,.hg,.svn
set wildignore+=*.swp,*.tmp
set wildignore+=node_modules,bower_components

"set whichwrap+=<,>,h,1
set wildmenu " turn on the wild menu
set ruler " always show current position
set cmdheight=1 " height of command bar
set backspace=eol,start,indent " Configure backspace so it acts as it shoud at
set lazyredraw " Dont redraw when executing macros (good performance)
set magic " For reg turn magic on
set showmatch " matching brackets
set mat=2 " how many tenths of a secnod to blink when matching brackets

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" set extra options when runnung in GUI Mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

" Files
set nobackup
set nowb
set noswapfile
set expandtab " Use spaces instead of tabs
set smarttab " Be smrt when using tabs
set shiftwidth=4
set tabstop=4
set softtabstop=4
set shiftwidth=4

" linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Samrt indent
set wrap "Wrap lines

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Specify the behavior when switching between buffers
try
    set switchbuf=useopen,usetab,newtab
    set stal=2
catch
endtry

" Return to last edit position when opening files
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

set viminfo^=% " Remember info about open buffers on close
set laststatus=2 " Always show the status line

" ------------------------------
" Utils
" ------------------------------

" Delete trailing white spcae on save, useful for Pyhton and CoffeScript
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

" Python execute
" TODO: make filetype (py) dependency
nnoremap <buffer> <F9> :exec '!python' shellescape(@%, 1)<cr>
"autocmd BufRead *.py nmap <F5> :!python %<CR>
autocmd BufRead *.jsx nmap <Leader>j :exec '!node' shellescape(@%, 1)<CR>
autocmd BufRead *.js nmap <Leader>j :exec '!node' shellescape(@%, 1)<CR>

" Mapea la tecla 0 para que haga lo mismo que ^ (ir al primer caracter -no espacio- de la línea)
map 0 ^

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
    nmap <D-j> <M-j>
    nmap <D-k> <M-k>
    vmap <D-j> <M-j>
    vmap <D-k> <M-k>
endif
