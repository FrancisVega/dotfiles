" .vimrc
" Author: Francis Vega <hisconer@gmail.com>
" Source: https://github.com/FrancisVega/dotfiles/blob/master/vimrc.symlink

set nocompatible
filetype off

" ----------------------------------------------------------------------------
" coc
" ----------------------------------------------------------------------------
set hidden
set nowritebackup
set updatetime=300
set shortmess+=c

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
    inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif
" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
"xmap <leader>f  <Plug>(coc-format-selected)
"nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
"nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
"nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <c-space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
"nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
"nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
"nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
"nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
"nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" coc extensions
let g:coc_global_extensions = ['coc-tslint-plugin', 'coc-tsserver', 'coc-emmet', 'coc-css', 'coc-html', 'coc-json', 'coc-yank', 'coc-prettier']

" ----------------------------------------------------------------------------
" Plugins
" ----------------------------------------------------------------------------

call plug#begin()
Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}

Plug 'ianks/vim-tsx'
Plug 'leafgarland/typescript-vim'
Plug 'vim-scripts/utl.vim'
Plug 'mtth/taglist.vim'
Plug 'tpope/vim-repeat'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-speeddating'
Plug 'inkarkat/vim-SyntaxRange'
Plug 'jremmen/vim-ripgrep'
Plug 'jiangmiao/auto-pairs'
Plug 'blueyed/vim-diminactive/'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'honza/vim-snippets'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'jiangmiao/auto-pairs'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'flazz/vim-colorschemes'
Plug 'gregsexton/MatchTag'
Plug 'tpope/vim-surround'
Plug 'terryma/vim-multiple-cursors'
Plug 'kana/vim-operator-user'
Plug 'rhysd/vim-operator-surround'
Plug 'tacahiroy/ctrlp-funky'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-colorscheme-switcher'
Plug 'gosukiwi/vim-atom-dark'
Plug 'atelierbram/vim-colors_duotones'
Plug 'dyng/ctrlsf.vim'
Plug 'pangloss/vim-javascript'
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'isRuslan/vim-es6'
Plug 'mxw/vim-jsx'
Plug 'Shougo/vimfiler.vim'
Plug 'prettier/vim-prettier'
Plug 'alvan/vim-closetag'
Plug 'othree/html5.vim'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'hzchirs/vim-material'
Plug 'jxnblk/vim-mdx-js'
Plug 'chriskempson/base16-vim'
Plug 'tpope/vim-unimpaired'
Plug 'kaicataldo/material.vim'
Plug 'ayu-theme/ayu-vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'haishanh/night-owl.vim'
call plug#end()


" ----------------------------------------------------------------------------
" General
" ----------------------------------------------------------------------------

" Bye bye fucking help page
:nmap <F1> :echo<CR>
:imap <F1> <C-o>:echo<CR>

" move single line of code
"nmap <C-k> [e
"nmap <C-j> ]e

" move multiple lines of code
vmap <C-k> [egv
vmap <C-j> ]egv

" Shell
set shell=/bin/bash

" Vim carga el .bash
set shellcmdflag=-ic

" Leader key
let mapleader = ","
let g:mapleader = ","

" Persistent undo
if has('persistent_undo')      "check if your vim version supports it
    set undofile                 "turn on the feature
    set undodir=~/.vim/undo  "directory where the undo files will be stored
endif

" column max char 79
highlight ColorColumn ctermbg=magenta guibg=#ff0088
call matchadd('ColorColumn', '\%101v', 100)

" utf8
set encoding=utf8

" Filesystem
set ffs=unix,dos,mac
set nrformats-=octal

" Hide Toolbar in MacVim
set guioptions=egmrt

" Relative numbers
set number
set relativenumber
set laststatus=2 " Always shows status bar

" set trailing whitespace with · char
if ("gui_running" == 0)
    set listchars=trail:·,
    set list
endif

" Better copy & paste
set pastetoggle=<F2>
set clipboard=unnamed

" Mouse and backspace
set mouse=a
set bs=2

" highlight the status bar when in insert mode
if version >= 700
    au InsertEnter * hi StatusLine ctermfg=235 ctermbg=2
    au InsertEnter * hi StatusLine ctermfg=240 ctermbg=12
endif

" History
set history=700

" set auto read when a file is changed from the outside
set autoread

" Reload .vimrc
autocmd! bufwritepost .vimrc source %

" Specify the behavior when switching between buffers
try
    set switchbuf=useopen,usetab,newtab
    set stal=2
catch
endtry

" Return to last edit position when opening files
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif

"set viminfo^=% " Remember info about open buffers on close
set laststatus=0 " Always show the status line

" Utils
let &t_EI = "\<esc>]50;CursorShape=0\x7"

" Delete trailing white spcae on save
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()

" Files
set nobackup
set nowb
set noswapfile
set expandtab " Use spaces instead of tabs
set smarttab " Be smrt when using tabs
set shiftwidth=4
set tabstop=4
set softtabstop=4

" linebreak on 500 characters
set lbr
set tw=500
set ai "Auto indent
set si "Samrt indent
set wrap "Wrap lines

" set 3 lines to the cursor - when moving vertocally using j/k
set so=3

" Search related
set ignorecase
set smartcase
set hlsearch
set incsearch

"set whichwrap+=<,>,h,1
set wildmenu " turn on the wild menu
set ruler " always show current position
set cmdheight=2 " height of command bar
set backspace=eol,start,indent " Configure backspace so it acts as it shoud at
set lazyredraw " Dont redraw when executing macros (good performance)
set magic " For reg turn magic on
set showmatch " matching brackets
set mat=2 " how many tenths of a secnod to blink when matching brackets

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" set extra options when runnung in GUI Mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set guioptions=
    set t_Co=256
    set guitablabel=%M\ %t
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Keep the error column always visible (jumpy when linter runs on input)
":set signcolumn=yes


" ----------------------------------------------------------------------------
" Syntax, Color and Typography
" ----------------------------------------------------------------------------

syntax on

set linespace=8
set macligatures
"set guifont=Droid\ Sans\ Mono\ for\ Powerline:h20 " Font
"set guifont=Space\ Mono\ for\ Powerline:h16 " Font
set guifont=JetBrains\ Mono\ for\ Powerline:h18 " Font
"set guifont=Source\ Code\ Pro:h17
"set guifont=JetBrains\ Mono:h17
"set guifont=Meslo\ LG\ L\ Regular\ for\ Powerline:h17 " Font
"set guifont=SauceCodePowerline-Regular:h20
"set guifont=Space\ Mono:h16
"set guifont=Fira\ Code:h18
"set guifont=Fira\ Mono\ for\ Powerline:h18
"set guifont=Inconsolata-g\ for\ Powerline:h18
"set guifont=Droid\ Sans\ Mono\ for\ Powerline:h18
"set guifont=monaco:h16 " Font

"set background=dark
"colorscheme paintbox
"colorscheme mac_classic
"colorscheme pw
"colorscheme mophiadark
"colorscheme atom-dark-256
"colorscheme perfect
"colorscheme onedark
"colorscheme duotone-darksea
"colorscheme materialbox
"colorscheme materialtheme
"colorscheme base16-atelier-plateau
"let ayucolor="light"  " for light version of theme
"let ayucolor="mirage" " for mirage version of theme
"let ayucolor="dark"   " for dark version of theme
colorscheme ayu
colorscheme night-owl
let g:lightline = { 'colorscheme': 'nightowl' }

" force javascript syntax to .sketchplugin files
au BufRead,BufNewFile *.cocoascript setfiletype javascript
au BufRead,BufNewFile *.sketchplugin setfiletype javascript

" force jsx syntax to .jsx files
" Or allow JSX in .js files
let g:jsx_ext_required = 0

" force html syntax to .nunjucks files
au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm,*.twig set ft=jinja.html.css
au BufRead,BufNewFile *.md setfiletype yaml

autocmd FileType twig.jinja setlocal shiftwidth=2 tabstop=2

" force scss syntax to css
"au BufRead,BufNewFile *.css set ft=scss syntax=scss
au BufRead,BufNewFile *.css set syntax=scss
"au BufRead,BufNewFile *.css set filetype=scss

autocmd FileType css set omnifunc=csscomplete#CompleteCSS

"jQuery syntax
au BufRead,BufNewFile jquery.*.js set ft=javascript syntax=jquery

" 2 tabs javascript
autocmd Filetype javascript setlocal ts=2 sw=2 expandtab

" 2 tabs css, sass
autocmd Filetype scss setlocal ts=2 sw=2 expandtab
autocmd Filetype css setlocal ts=2 sw=2 expandtab

" Html, Twig
autocmd Filetype html setlocal tabstop=2 softtabstop=2 shiftwidth=2
autocmd Filetype jinja setlocal tabstop=2 softtabstop=2 shiftwidth=2
autocmd Filetype twig setlocal tabstop=2 softtabstop=2 shiftwidth=2


" ----------------------------------------------------------------------------
" Vim-jsx
" ----------------------------------------------------------------------------
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" ----------------------------------------------------------------------------
" NerdTree Plugin
" ----------------------------------------------------------------------------

"NerdTree ignore
let NERDTreeIgnore=['node_modules', 'bower_components']

" ignore compiled files
set wildignore+=*.o,*~,*.pyc,*.a
set wildignore+=*.bpm,*.gif,*.ico,*.jpg,*.png
set wildignore+=.DS_Store,.git,.hg,.svn
set wildignore+=*.swp,*.tmp
set wildignore+=node_modules,bower_components,min/*,doc/*

" ----------------------------------------------------------------------------
" VimFilter Plugin
" ----------------------------------------------------------------------------
"let g:vimfiler_as_default_explorer = 1

" ----------------------------------------------------------------------------
" Operator Surround Plugin
" ----------------------------------------------------------------------------

" operator mappings
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)




" ----------------------------------------------------------------------------
" Mappings
" ----------------------------------------------------------------------------

nnoremap <leader>f :Prettier<cr>

" Set norwap
nnoremap <leader>W :set nowrap<cr>

" Node REPL
nnoremap <leader>,n :!node %<cr>

" Fast escape
inoremap jj <esc>

" hightlight trailing spaces in annoying red
highlight ExtraWhiteSpace ctermbg=1 guibg=red
match ExtraWhiteSpace /\s\+$/
autocmd BufWinEnter * match ExtraWhiteSpace /\s\+$/
autocmd InsertEnter * match ExtraWhiteSpace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhiteSpace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" highlight current line
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

"buffer cycle
noremap <c-l> :bnext<cr>
noremap <c-h> :bprevious<cr>




" ----------------------------------------------------------------------------
" Airline Plugin
" ----------------------------------------------------------------------------

" cool fonts
let g:airline_powerline_fonts = 1

" ebable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" show just the filename
let g:airline#extensions#tabline#fnamemod = 1

" airlinetheme
"let g:airline_theme='wombat' " Para usar con onedark
"let g:airline_theme='raven' " Para usar con Jaeger
let g:airline_theme='jellybeans' " Para usar con Jaeger
"let g:airline_theme='tomorrow' " Para usar con Jaeger
"let g:airline_theme='ayu' " Para usar con Jaeger

let g:airline_section_x=''
let g:airline_section_y=''

" ----------------------------------------------------------------------------
" Ctrl-P Plugin
" ----------------------------------------------------------------------------
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_max_height = 8
let g:ctrlp_show_hidden = 1
let g:ctrlp_switch_buffer = 0
let g:ctrlp_open_multiple_files = '99ir'
"let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
set grepprg=rg\ --color=never
let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_map = '<tab>'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
nnoremap <s-tab> :CtrlPBuffer<cr>
"let g:ctrlp_prompt_mappings = {
    "\ 'AcceptSelection("e")': ['<c-t>'],
    "\ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    "\ }

" CTRL-P to use ripgrep
"if executable('rg')
  "set grepprg=rg\ --color=never
  "let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
"endif

" CtrlPFunky
let g:ctrlp_funky_syntax_highlight = 1

" CtrlSF (Search and Replace)
noremap <leader>,r :CtrlSF 

" ----------------------------------------------------------------------------
" Ctrl-P Funky Plugin
" ----------------------------------------------------------------------------

nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

" ----------------------------------------------------------------------------
" The Silver Searcher Plugin
" ----------------------------------------------------------------------------

if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor\ --ignore=node_modules
endif

" ----------------------------------------------------------------------------
" Mappings
" ----------------------------------------------------------------------------

" --- testing maps
nnoremap 0 ^
nnoremap <leader>,b :bp\| bd #<cr>
nnoremap <c-j> }
nnoremap <c-k> {
" --- testing maps

" css/sass experimental mappings

" Typos
command! -bang Q q<bang>
command! -bang W w<bang>

noremap <Leader>y :NERDTreeToggle<CR>
nnoremap <leader>w :w!<cr>
noremap <leader>e :e $MYVIMRC<cr>
noremap <space> /
"noremap <c-space> ?

" Mueve el cursor de línea en línea aunque sea un párrafo 'wrapeado'
noremap j gj
noremap k gk

" Centra el cursor en la pantalla
nnoremap G Gzz
nnoremap n nzz
nnoremap N Nzz
nnoremap { {zz
nnoremap } }zz

" Remove hightlight
noremap <Leader>, :nohl<CR>
vnoremap <Leader>, :nohl<CR>
inoremap <Leader>, :nohl<CR>

" Switch CWD to the directory of the open buffer
noremap <leader>cd :cd<space>%:h<cr>:pwd<cr>

:cnoremap <C-a>  <Home>
:cnoremap <C-b>  <Left>
:cnoremap <C-f>  <Right>
:cnoremap <C-d>  <Delete>
:cnoremap <M-b>  <S-Left>
:cnoremap <M-f>  <S-Right>
:cnoremap <M-d>  <S-right><Delete>
:cnoremap <Esc>b <S-Left>
:cnoremap <Esc>f <S-Right>
:cnoremap <Esc>d <S-right><Delete>
:cnoremap <C-g>  <C-c>

" Don't show the startup message
set shortmess=I

" Short message to avoid Press Enter to Continue
:set shortmess=a

command! -nargs=0 Prettier :CocCommand prettier.formatFile

" Use <C-l> for trigger snippet expand.
imap <C-0> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" Local vimrc files
set exrc
set secure

" Dimming window
let g:diminactive_use_colorcolumn = 1
:hi ColorColumn ctermbg=0 guibg=#15191E

" Goyo
let g:goyo_width = 82
noremap <leader>G :Goyo<cr>

" FzF
map <leader><space> <Esc><Esc>:BLines<CR>

" Vim comentary
autocmd FileType javascript.jsx setlocal commentstring={/*\ %s\ */}
